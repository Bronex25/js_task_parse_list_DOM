{"mappings":"ACEA,IAAM,EAAO,SAAS,gBAAgB,CAAC,MACjC,EAAW,SAAS,aAAa,CAAC,OAwBxC,AAtBA,SAAgB,CAAK,EAQnB,AAPmB,MAAM,IAAI,CAAC,GAAO,IAAI,CAAC,SAAC,CAAA,CAAM,CAAjD,EACE,IAAM,EAAU,EAAK,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,QAAS,IAGrD,OAAO,OAFS,EAAK,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,QAAS,KAE5B,OAAO,EAClC,GAEW,OAAO,CAAC,SAAC,CAApB,EAA6B,OAAA,EAAS,WAAW,CAAC,E,EACpD,EAaO,GAVE,MAAM,IAAI,CAWN,GAXc,GAAG,CAAC,SAAC,CAA9B,EACE,MAAO,CACL,KAAM,EAAK,SAAS,CACpB,SAAU,EAAK,OAAO,CAAC,QAAQ,CAC/B,OAAQ,EAAK,OAAO,CAAC,MAAM,CAC3B,IAAK,EAAK,OAAO,CAAC,GAAG,AACvB,CACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar list = document.querySelectorAll(\"li\");\nvar mainList = document.querySelector(\"ul\");\nfunction toSort(input) {\n    var sortedList = Array.from(input).sort(function(itm1, itm2) {\n        var person1 = itm1.dataset.salary.replace(/[$,]/g, \"\");\n        var person2 = itm2.dataset.salary.replace(/[$,]/g, \"\");\n        return Number(person2) - Number(person1);\n    });\n    sortedList.forEach(function(elem) {\n        return mainList.appendChild(elem);\n    });\n}\nfunction getEmployees(input) {\n    return Array.from(input).map(function(elem) {\n        return {\n            name: elem.innerText,\n            position: elem.dataset.position,\n            salary: elem.dataset.salary,\n            age: elem.dataset.age\n        };\n    });\n}\ntoSort(list);\ngetEmployees(list);\n\n//# sourceMappingURL=index.b8762bdf.js.map\n","'use strict';\n\nconst list = document.querySelectorAll('li');\nconst mainList = document.querySelector('ul');\n\nfunction toSort(input) {\n  const sortedList = Array.from(input).sort((itm1, itm2) => {\n    const person1 = itm1.dataset.salary.replace(/[$,]/g, '');\n    const person2 = itm2.dataset.salary.replace(/[$,]/g, '');\n\n    return Number(person2) - Number(person1);\n  });\n\n  sortedList.forEach((elem) => mainList.appendChild(elem));\n}\n\nfunction getEmployees(input) {\n  return Array.from(input).map((elem) => {\n    return {\n      name: elem.innerText,\n      position: elem.dataset.position,\n      salary: elem.dataset.salary,\n      age: elem.dataset.age,\n    };\n  });\n}\n\ntoSort(list);\ngetEmployees(list);\n"],"names":["list","document","querySelectorAll","mainList","querySelector","toSort","input","sortedList","Array","from","sort","itm1","itm2","person1","dataset","salary","replace","Number","forEach","elem","appendChild","map","name","innerText","position","age"],"version":3,"file":"index.b8762bdf.js.map"}